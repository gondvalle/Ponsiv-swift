#!/usr/bin/env swift
import Foundation

struct AssetWriter {
    let repoRoot: URL
    let assetsDir: URL
    let outputFile: URL

    func run() throws {
        guard FileManager.default.fileExists(atPath: assetsDir.path) else {
            throw NSError(
                domain: "AssetIndex",
                code: 1,
                userInfo: [NSLocalizedDescriptionKey: "assets directory not found at \(assetsDir.path)" ]
            )
        }

        let enumerator = FileManager.default.enumerator(
            at: assetsDir,
            includingPropertiesForKeys: [.isRegularFileKey],
            options: [.skipsHiddenFiles]
        )

        var mapping: [String: String] = [:]
        while let fileURL = enumerator?.nextObject() as? URL {
            let resourceValues = try fileURL.resourceValues(forKeys: [.isRegularFileKey])
            guard resourceValues.isRegularFile == true else { continue }
            let relativePath = fileURL.path.replacingOccurrences(of: assetsDir.path + "/", with: "")
            mapping[relativePath] = relativePath
        }

        let sortedKeys = mapping.keys.sorted()
        var body = "// swiftlint:disable all\n// Generated by Scripts/asset-index.swift -- DO NOT EDIT\n\nimport Foundation\n\npublic enum AssetIndex {\n    public static let all: [String: String] = [\n"
        for key in sortedKeys {
            guard let value = mapping[key] else { continue }
            body.append("        \"\(key)\": \"\(value)\",\n")
        }
        body.append("    ]\n}\n")

        try FileManager.default.createDirectory(
            at: outputFile.deletingLastPathComponent(),
            withIntermediateDirectories: true
        )
        try body.write(to: outputFile, atomically: true, encoding: .utf8)
    }
}

let fileManager = FileManager.default
let scriptURL = URL(fileURLWithPath: CommandLine.arguments[0])
let scriptsDir = scriptURL.deletingLastPathComponent()
let repoRoot = scriptsDir.deletingLastPathComponent()
let writer = AssetWriter(
    repoRoot: repoRoot,
    assetsDir: repoRoot.appendingPathComponent("assets"),
    outputFile: repoRoot.appendingPathComponent("Sources/Infrastructure/Assets/Assets.swift")
)

do {
    try writer.run()
    fputs("Asset index generated at \(writer.outputFile.path)\n", stdout)
    exit(EXIT_SUCCESS)
} catch {
    fputs("Error: \(error)\n", stderr)
    exit(EXIT_FAILURE)
}
